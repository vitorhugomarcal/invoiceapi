generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(uuid())
  name              String
  email             String              @unique
  role              Role                @default(BASIC)
  created_at        DateTime            @default(now())
  updated_at        DateTime            @default(now())
  Client            Client[]
  Company           Company[]
  Item              Item[]
  PaymentModeCustom PaymentModeCustom[]
  UnitTypeCustom    UnitTypeCustom[]
  Invoice           Invoice[]
  SupplierUser      SupplierUser[]
  Estimate          Estimate[]

  @@map("users")
}

model Company {
  id             String @id @default(uuid())
  cnpj           String @unique
  phone          String
  state          String
  city           String
  cep            String
  address        String
  user_id        String
  neighborhood   String
  address_number String
  company_name   String
  user           User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("companies")
}

model SupplierUser {
  supplier_id String
  user_id     String

  supplier Supplier @relation(fields: [supplier_id], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([supplier_id, user_id]) // Chave composta para garantir unicidade da combinação
}

model Supplier {
  id             String         @id @default(uuid())
  cnpj           String         @unique
  phone          String
  state          String
  city           String
  cep            String
  address        String
  neighborhood   String
  address_number String
  company_name   String
  users          SupplierUser[]
  Estimate       Estimate[]

  @@map("sluppliers")
}

model Client {
  id             String    @id @default(uuid())
  type           String
  cpf            String?
  cnpj           String?
  name           String
  company_name   String?
  email_address  String
  phone          String
  cep            String
  address        String
  address_number String
  neighborhood   String
  city           String
  state          String
  user_id        String
  user           User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  Invoice        Invoice[]

  @@map("clients")
}

model PaymentMode {
  id   String @id @default(uuid())
  name String

  @@map("payments_mode")
}

model PaymentModeCustom {
  id      String @id @default(uuid())
  name    String
  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("payments_mode_custom")
}

model UnitType {
  id   String @id @default(uuid())
  name String

  @@map("unit_types")
}

model UnitTypeCustom {
  id      String @id @default(uuid())
  name    String
  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("unit_types_custom")
}

model Item {
  id          String  @id @default(uuid())
  name        String
  price       Decimal
  description String
  unit        String
  user_id     String
  user        User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("items")
}

model Invoice {
  id             String   @id @default(uuid())
  invoice_number String?
  status         String?
  notes          String?
  sub_total      Decimal?
  total          Decimal?

  created_at DateTime @default(now())

  user_id   String
  client_id String

  user   User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  client Client @relation(fields: [client_id], references: [id], onDelete: Cascade)

  InvoiceItems InvoiceItems[]

  @@map("invoices")
}

model InvoiceItems {
  id       String  @id @default(uuid())
  name     String
  price    Decimal
  quantity Decimal
  unit     String
  total    Decimal

  created_at DateTime @default(now())

  invoice    Invoice @relation(fields: [invoice_id], references: [id], onDelete: Cascade)
  invoice_id String

  @@map("invoice_items")
}

model Estimate {
  id              String  @id @default(uuid())
  estimate_number String?
  status          String?
  notes           String?
  user_id         String
  supplier_id     String

  created_at DateTime @default(now())

  user     User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  supplier Supplier @relation(fields: [supplier_id], references: [id], onDelete: Cascade)

  EstimateItems EstimateItems[]

  @@map("estimates")
}

model EstimateItems {
  id       String  @id @default(uuid())
  name     String
  quantity Decimal

  created_at DateTime @default(now())

  estimate    Estimate @relation(fields: [estimate_id], references: [id], onDelete: Cascade)
  estimate_id String

  @@map("estimate_items")
}

enum Role {
  BASIC
  MASTER
}
